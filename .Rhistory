version   = 'futR',
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR5_c    <-  data.frame(model = "Rec 5 cov2",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- rbind(df,dfR5_c)
r5_fitc  <- getFit(mm, nm = "recType = 5 cov2")
rec_fit <- rbind(rec_fit,r5_fitc)
plot_rs(rec_fit)
plot_rs(rec_fit)
rec_fit
tail(rec_fit)
dev.off()
dev.off()
rec_fit
#plot_par_pdf(df)
plot_rs(rec_fit)
plot_par_pdf(df)
df
head(plot_par_pdf(df))
head(df)
r5_fitc
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
source("D:/GitHub_cloud/futR/R/sub_fun/rmd2md.R")
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
src_fldr
runRecMod
# load data, packages, setup, etc.
source("R/01_make.R")
#___________________________________________
# 2. Compile futR	(first time through - can skip this step after )
#___________________________________________
recompile_model <- FALSE # to recompile the model set to TRUE
source("D:/GitHub_cloud/futR/R/sub_fun/plot_rs.R")
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
rm(list=ls()) ; dir()
# load data, packages, setup, etc.
source("R/01_make.R")
rm(list=ls()) ; dir()
# load data, packages, setup, etc.
source("R/01_make.R")
wd0 <- getwd()
setwd("src/TMB")
recompile('futR')
setwd(wd0)
wd0 <- getwd()
setwd("src/TMB")
recompile('futR')
model <- "futR"
TMB::compile( paste0(model,'.cpp'))
getwd()
?TMB::compile
TMB::compile( paste0(model,'.cpp'),safeunload=T)
if(file.exists( paste0(model,'.so')) )
file.remove( paste0(model,'.so'))
if(file.exists( paste0(model,'.o')) )
file.remove( paste0(model,'.o'))
TMB::compile( paste0(model,'.cpp'),safeunload=T)
file.exists(paste0(model,'.dll'))
recompile('futR')
aa
file.exists(paste0(model,'.dll'))
source("/Volumes/LaCie/GitHub_cloud/futR/R/sub_fun/recompile.R")
recompile('futR')
# read in the data and create a datlist
datlist <- makefutR_data("data/in/futR_Inputs.xlsx" )
setwd(wd0)
# read in the data and create a datlist
datlist <- makefutR_data("data/in/futR_Inputs.xlsx" )
# recruitment data:
datlist$rs_dat$R_obs
datlist$rs_dat$S_obs
# covar data:
datlist$rs_dat$rs_cov
# rec        <-  rec_dat[[1]]
# env        <-  env_covars
# which parameters to estimate with futR?
datlist$estparams
# starting values?
datlist$parameters
# parameter map:
datlist$maplist
# which phases to estimate in (not yet coded up)
datlist$phases
# set some global values for the demo below:
estparams <-  datlist$estparams[1:6]
rec       <-  data.frame(readxl::read_xlsx("data/in/futR_Inputs.xlsx" , sheet = "rec_data" ))
# hand code datlist:
datlist  <-  makeDat(
rectype    =  1,
tauIN      =  0,
sigMethod  =  1, # (default, no random effects)
estparams  =  estparams,
estMode    =  1,
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
Rec1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
source("/Volumes/LaCie/GitHub_cloud/futR/R/sub_fun/recompile.R")
source("/Volumes/LaCie/GitHub_cloud/futR/R/sub_fun/recompile.R")
Rec1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
src_fldr
src_fldr
dir()
setwd0
wd0
setwd(wd0)
# run the basic model
Rec1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
Rec1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
setwd(wd0)
Rec1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
Rec1
Rec1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR1    <-  data.frame(model = "Rec 1",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- dfR1
r1_fit  <- getFit(mm, nm = "recType = 1")
rec_fit <- r1_fit
print(rec_fit)
rec_fit
source("/Volumes/LaCie/GitHub_cloud/futR/R/sub_fun/getFit.R")
# summarize results
dfR1    <-  data.frame(model = "Rec 1",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- dfR1
r1_fit  <- getFit(mm, nm = "recType = 1")
rec_fit <- r1_fit
rec_fit
source("/Volumes/LaCie/GitHub_cloud/futR/R/sub_fun/getFit.R")
rec_fit
# summarize results
dfR1    <-  data.frame(model = "Rec 1",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- dfR1
r1_fit  <- getFit(mm, nm = "recType = 1")
rec_fit <- r1_fit
rec
rec_fit
head(rec_fit)
source("/Volumes/LaCie/GitHub_cloud/futR/R/sub_fun/getFit.R")
plot_rs(rec_fit)
print(rec_fit)
rec_fit
print(rec_fit)
jpeg("Figs/recplot1.jpg")
print(plot_rs(rec_fit))
dev.off()
getwd()
print(rec_fit)
jpeg("Figs/recplot1.jpg", width = 8, height= 8, dpi = 250, units = "in")
print(rec_fit)
jpeg("Figs/recplot1.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(rec_fit))
dev.off()
estparams1 <- estparams
estparams1["log_a"] <- FALSE
startVal_1     <-   list(log_a = -Inf) # force 0 intercept
datlist  <-  makeDat(
rectype    =  2,
tauIN      =  0,
sigMethod  =  1, # (default, no random effects)
estparams  =  estparams1, # set to estparams to allow est of log_a
startVal   =  startVal_1, # set to NULL to remove 0 intercept
estMode    =  1,
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# run the basic model
Rec2 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR2    <-  data.frame(model = "Rec 2",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- rbind(dfR1,dfR2)
r2_fit  <- getFit(mm, nm = "recType = 2")
rec_fit <- rbind(rec_fit,r2_fit)
jpeg("Figs/recplot2.jpg", width = 8, height= 8, res = 250, units = "in"))
jpeg("Figs/recplot2.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(rec_fit))
print(plot_rs(rec_fit))
dev.off()
jpeg("Figs/recplot2.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(rec_fit))
dev.off()
print(rec_fit)
jpeg("Figs/recplot1.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(r1_fit))
dev.off()
rec_df
head(rec_fit)
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
rectype    =  3,
tauIN      =  0,
sigMethod  =  1, # (default, no random effects)
estparams  =  estparams,
estMode    =  1,
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# run the basic model
Rec3 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR3    <-  data.frame(model = "Rec 3",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- rbind(df,dfR3)
r3_fit  <- getFit(mm, nm = "recType = 3")
rec_fit <- rbind(rec_fit,r3_fit)
rm(mm)
jpeg("Figs/recplot3.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(rec_fit))
dev.off()
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
rectype    =  4,
tauIN      =  0,
sigMethod  =  1, # (default, no random effects)
estparams  =  estparams,
estMode    =  1,
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# run the basic model
Rec4 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR4    <-  data.frame(model = "Rec 4",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- rbind(df,dfR3)
r4_fit  <- getFit(mm, nm = "recType = 4")
rec_fit <- rbind(rec_fit,r4_fit)
jpeg("Figs/recplot4.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(rec_fit))
dev.off()
# read in the data and create a datlist (rather than hand code it)
datlist <- makefutR_data("data/in/futR_Inputs.xlsx" )
# run the basic model
Rec4_covar <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR4_c    <-  data.frame(model = "Rec 4 with covar",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- rbind(dfR4,dfR4_c)
r4_fit_c  <- getFit(mm, nm = "recType = 4 with covar")
rec_fit <- rbind(r4_fit,r4_fit_c)
rm(mm)
jpeg("Figs/recplot5.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_rs(rec_fit))
dev.off()
estparams  = c(
log_a        = TRUE,
log_b        = TRUE,
beta         = FALSE,  # no env covariate
lambda       = FALSE,  # no env covariate
epsi_s       = TRUE,
logsigma     = TRUE)
rectype_use <- 4 # recType to use (Ricker)
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
tauIN      =  0,  # set tau to zero (no random effects)
sigMethod  =  1,
estparams  =  estparams,
rectype    =  rectype_use, #Ricker
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# run the basic model
m_S1 <-  mm <-runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = F,
simulate  = TRUE,
sim_nitr  = 1000)
df_S1 <-  data.frame(model = "sigMethod 1",
estimate=as.vector(mm$sim),
parameter=names( mm$mle)[row(mm$sim)])
rm(mm)
mu   <- df_S1%>%group_by(model,parameter)%>%summarise(grp.mean=mean(estimate))
peak <- df_S1%>%group_by(model,parameter)%>%
count(parameter,round(estimate,1))%>%
slice(which.max(n))
names(peak)<- c("model","parameter","freq","n")
jpeg("Figs/plotpar1.jpg", width = 8, height= 8, res = 250, units = "in")
print(plot_par_pdf(df_S1))
dev.off()
jpeg("Figs/plotpar1.jpg", width = 8, height= 4, res = 250, units = "in")
print(plot_par_pdf(df_S1))
dev.off()
jpeg("Figs/plotpar1.jpg", width = 6, height= 3, res = 250, units = "in")
print(plot_par_pdf(df_S1))
dev.off()
jpeg("Figs/plotpar1.jpg", width = 8, height= 3, res = 250, units = "in")
print(plot_par_pdf(df_S1))
dev.off()
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
tauIN      =  1,
sigMethod  =  2,
estparams  =  estparams,
rectype    =  rectype_use, #Ricker
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# re-run the model with tau
m_S2  <-  mm <-  runRecMod(dlistIN  = datlist,
version  = 'futR',
src_fldr   = "src/TMB",
recompile= F,
simulate = TRUE,
maxitr   = 100000,
maxeval  = 100000,
sim_nitr = 1000)
df_S2 <-  data.frame(model = "sigMethod 2",
estimate   = as.vector(mm$sim),
parameter  = names( mm$mle)[row(mm$sim)])
rm(mm)
df <- rbind(df_S1, df_S2)
mu   <- df%>%group_by(model,parameter)%>%summarise(grp.mean=mean(estimate))
peak <- df%>%group_by(model,parameter)%>%
count(parameter,round(estimate,1))%>%
slice(which.max(n))
names(peak)<- c("model","parameter","freq","n")
jpeg("Figs/plotpar2.jpg")
print(plot_par_pdf(df))
dev.off()
jpeg("Figs/plotpar2.jpg", width = 8, height= 3, res = 250, units = "in")
print(plot_par_pdf(df))
dev.off()
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
tauIN      =  .001,
sigMethod  =  3,
#tMethod    =  tm_use, #cloglog link (g = 1-exp(-exp(gamma)))
estparams  =  estparams,
rectype    =  rectype_use, #Ricker
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# re-run the model with tau
m_S3 <-  mm <- runRecMod(dlistIN   = datlist,
version   = 'futR',
src_fldr   = "src/TMB",
recompile = F,
simulate  = TRUE,
sim_nitr  = 1000)
df_S3 <-  data.frame(model = "sigMethod 3",
estimate=as.vector(mm$sim),
parameter=names( mm$mle)[row(mm$sim)])
rm(mm)
df <- rbind(df, df_S3)
mu   <- df%>%group_by(model,parameter)%>%summarise(grp.mean=mean(estimate))
peak <- df%>%group_by(model,parameter)%>%
count(parameter,round(estimate,1))%>%
slice(which.max(n))
names(peak)<- c("model","parameter","freq","n")
jpeg("Figs/plotpar3.jpg")
print(plot_par_pdf(df))
dev.off()
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
tauIN      =  .03,
sigMethod  =  4,
#tMethod    =  tm_use, #cloglog link (g = 1-exp(-exp(gamma)))
estparams  =  estparams,
rectype    =  rectype_use, #Ricker
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# re-run the model with tau
m_S4 <-  mm <- runRecMod(dlistIN=datlist,
version='futR',
src_fldr   = "src/TMB",
recompile=F,
simulate=TRUE,
sim_nitr = 1000)
df_S4 <-  data.frame(model = "sigMethod 4",
estimate=as.vector(mm$sim),
parameter=names( mm$mle)[row(mm$sim)])
rm(mm)
df <- rbind(df, df_S4)
mu   <- df%>%group_by(model,parameter)%>%summarise(grp.mean=mean(estimate))
peak <- df%>%group_by(model,parameter)%>%
count(parameter,round(estimate,1))%>%
slice(which.max(n))
names(peak)<- c("model","parameter","freq","n")
jpeg("Figs/plotpar4.jpg", width = 8, height= 3, res = 250, units = "in")
print(plot_par_pdf(df))
dev.off()
datlist  <-  makeDat(
tauIN      =  .03,
sigMethod  =  5,
#tMethod    =  tm_use, #cloglog link (g = 1-exp(-exp(gamma)))
estparams  =  estparams,
rectype    =  rectype_use, #Ricker
rec_years  =  rec$rec_year,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# re-run the model with tau
m_S5 <-  mm <- runRecMod(dlistIN=datlist,
version='futR',
src_fldr   = "src/TMB",
recompile=F,
simulate=TRUE,
sim_nitr = 1000)
df_S5 <-  data.frame(model = "sigMethod 5",
estimate=as.vector(mm$sim),
parameter=names( mm$mle)[row(mm$sim)])
rm(mm)
df <- rbind(df, df_S5)
jpeg("Figs/plotpar5.jpg", width = 8, height= 3, res = 250, units = "in")
print(plot_par_pdf(df))
dev.off()
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
rmd2md(rmd_fl = "vingettes/futR_demo",md_fl = "README")
library(futR)
source("~/Documents/GitHub_mac/futR/R/sub_fun/AIC_selection.R")

simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
getwd()
dir()
setwd("GitHub")
dir()
setwd("futR")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
mm$rep
mm
mm$out
mm$pred
names(mm)
source("~/Documents/GitHub/futR/R/sub_fun/runmod.R")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
dlistIN   = datlist
attach(list(dlistIN  = datlist,
version  = 'futR',
recompile= F,
simulate = TRUE,
maxitr   = 100000,
maxeval  = 100000,
sim_nitr = 1000))
dyn.load( dynlib(version) )
model  <- MakeADFun(
data                 =  dlistIN$rs_dat,
parameters           =  dlistIN$parameters,
DLL                  =  version,
checkParameterOrder  =  TRUE,
hessian              =  TRUE,
map                  =  dlistIN$maplist,
silent               =  silentIN)
silentIN   = TRUE
se.fit     = TRUE
src_fldr   = "src"
dyn.load( dynlib(version) )
model  <- MakeADFun(
data                 =  dlistIN$rs_dat,
parameters           =  dlistIN$parameters,
DLL                  =  version,
checkParameterOrder  =  TRUE,
hessian              =  TRUE,
map                  =  dlistIN$maplist,
silent               =  silentIN)
tmpmod  <- list()
tmpmod$model    <-  model
tmpmod$fit      <-  nlminb(model$env$last.par.best,
model$fn,
model$gr,
control=list(iter.max=maxitr,eval.max=maxeval))
if(tmpmod$fit$objective==Inf)
stop("Problem with objective function (Inf)")
if(is.na(tmpmod$fit$objective))
stop("Problem with objective function (NaN)")
sdreport(model,getJointPrecision=TRUE)
model$report
model$report(lp)
model$report()
summary(tmpmod$rep)
model$env$last.par.best
with(model,optimHess(tmpmod$mle,model$fn,model$gr))
model$env$last.par
lp              <-  model$env$last.par
model$report(lp)
TMB:::summary.sdreport(tmpmod$sdr, "report")
sdreport(model,getJointPrecision=TRUE)
summary(sdreport(model,getJointPrecision=TRUE))
summary(tmpmod$sdr)
source("~/Documents/GitHub/futR/R/sub_fun/runmod.R")
tmpmod$fit
names(model)
names(model)
model$report()
model$sdreport()
model$asreport()
model$adreport()
model$adreport()
names(model)
model$retape()
model$par
model$retape
names(model)
names(model$fn)
model$fn
model$fn()
source("~/Documents/GitHub/futR/R/sub_fun/runmod.R")
model$fn()
names(model)
model$he()
model$method()
model$method
model$env
model$simulate
model$simulate()
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = F,
simulate  = TRUE,
sim_nitr  = 1000)
getwd()
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = F,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$objFun
m_S1$report$nll
m_S1$report$nll_test
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll_test
m_S1$report$nll_test2
m_S1$report$nll
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll_test2
m_S1$report$nll_test
m_S1$report$nll
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test
m_S1$report$nll_test2
m_S1$report$nllnotlog
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test
log(0)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test
log(-3)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test
m_S1$report$nll_test2
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
pi
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
3.141593
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll_test2
m_S1$report$nll_test
m_S1$report$nll
log(3.14)
log(3.141593)
log(3.141593*.2)
log(3.141593)*log(.2)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test2
pi
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll_test2
m_S1$report$nll
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test2
m_S1$report$nll_test
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
log(1)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
log(1)
log(2)
log(2*pi)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll_test
m_S1$report$nll_test2
m_S1$report$nll
log(2*pi)
pi
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll
m_S1$report$nll_test
m_S1$report$nll_test2
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1$report$nll_test2
m_S1$report$nll_test
m_S1$report$nll
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
warnings()
mm$report$nll
mm$report$nll_test
m_S1 <-  mm <-runmod(dlistIN   = datlist,
+                      version   = 'futR',
+                      recompile = T,
+                      simulate  = TRUE,
+                      sim_nitr  = 1000)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = F,
simulate  = TRUE,
sim_nitr  = 1000)
mm$report$nll_test
mm$report$nll
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = F,
simulate  = TRUE,
sim_nitr  = 1000)
mm$report$nll
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
setwd("../")
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
mm$report$nll
mm$report$nll_test
m_S1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = T,
simulate  = TRUE,
sim_nitr  = 1000)
mm$report$nll_test
mm$report$nll
rm(list=ls())
rm(list=ls())
rm(list=ls())
# rm(list=ls()); setwd("/Users/kholsman/Documents/GitHub/futR")
#___________________________________________
# 1. Set things up
#___________________________________________
# rm(list=ls())
# load data, packages, setup, etc.
source("R/make.R")
# rm(list=ls()); setwd("/Users/kholsman/Documents/GitHub/futR")
#___________________________________________
# 1. Set things up
#___________________________________________
# rm(list=ls())
# load data, packages, setup, etc.
source("R/make.R")
getwd()
dir()
dir()
rm(list=ls()); setwd("/Users/kholsman/Documents/GitHub/futR")
source("R/make.R")
dir()
setwd("/Users/kholsman/Documents/GitHub/futR")
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
#knitr::opts_chunk$set(echo = TRUE)
#source("R/make.R")       # loads packages, data, setup, etc.
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
knitr::opts_knit$set(root.dir = '../')
install.packages("devtools")
# rm(list=ls()); setwd("/Users/kholsman/Documents/GitHub/futR")
#___________________________________________
# 1. Set things up
#___________________________________________
# rm(list=ls()) ; dir()
# load data, packages, setup, etc.
source("R/make.R")
rm(list=ls()); setwd("/Users/kholsman/Documents/GitHub/futR")
source("R/make.R")
# set up some demo data:
rec        <-  rec_dat[[1]]
env        <-  env_covars
# select which covariates influence pre-spawning success (e.g., spawning habitat)
beta_use   <-  env_covars*0
beta_use[1,]   <-  1
# select which covariates influence post-spawning success (e.g.,  survival to age 1)
lambda_use   <-  env_covars*0
lambda_use[2,]   <-  1
# z score the covariates:
env[1,]    <-  as.numeric(scale(env_covars[1,]))
env[2,]    <-  as.numeric(scale(env_covars[2,]))
ration     <-  ration_tmb[,1]
# which parameters to estimate with futR?
phases  = c(
log_a        = 1,
log_b        = 1,
#logit_tau     = TRUE,
beta         = 1,
lambda       = 1,
epsi_s       = 1,
logsigma     = 1)
estparams  = c(
log_a        = TRUE,
log_b        = TRUE,
beta         = FALSE,  # no env covariate
lambda       = FALSE,  # no env covariate
epsi_s       = FALSE,
logsigma     = TRUE)
# makeDat will make the input values, data, and phases for the model:
datlist  <-  makeDat(
rectype    =  1,
tauIN      =  0,
sigMethod  =  1, # (default, no random effects)
estparams  =  estparams,
estMode    =  1,
rec_years  =  rec$years,
Rec        =  rec$Robs,
SSB        =  rec$SSB,
sdSSB      =  rec$sdSSB,
sdRec      =  rec$sdRobs,
covars     =  NULL,
covars_sd  =  NULL)
# run the basic model
Rec1 <-  mm <-runmod(dlistIN   = datlist,
version   = 'futR',
recompile = FALSE,
simulate  = TRUE,
sim_nitr  = 1000)
# summarize results
dfR1    <-  data.frame(model = "Rec 1",
estimate  = as.vector(mm$sim),
parameter = names( mm$mle)[row(mm$sim)])
df      <- dfR1
r1_fit  <- getFit(mm, nm = "recType = 1")
rec_fit <- r1_fit
rm(mm)
#plot_par_pdf(dfR1_t1)
plot_rs(rec_fit)
install.packages(TMB)
"TMB"
install.packages("TMB")
install.packages("Matrix")
rm(list=ls()); setwd("/Users/kholsman/Documents/GitHub/futR")
#___________________________________________
# 1. Set things up
#___________________________________________
# rm(list=ls()) ; dir()
# load data, packages, setup, etc.
source("R/make.R")
#___________________________________________
# 2. Compile futR	(first time through - can skip this step after )
#___________________________________________
recompile_model <- TRUE # to recompile the model set to TRUE
if(recompile_model){
wd0 <- getwd()
setwd("src")
recompile('futR')
setwd(wd0)
}
recompile('futR')
getwd()
TMB::compile("futR.cpp")
library("TMB")
version("Rtools")
?RTools
version()
R.version()
R.version
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
